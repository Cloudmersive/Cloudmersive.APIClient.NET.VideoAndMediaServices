/* 
 * videoapi
 *
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.VideoAndMediaServices.Client;

namespace Cloudmersive.APIClient.NET.VideoAndMediaServices.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert Video to Animated GIF format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <param name="startTime">Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)</param>
        /// <param name="timeSpan">Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] VideoConvertToGif (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, bool? extendProcessingTime = null, DateTime? startTime = null, DateTime? timeSpan = null);

        /// <summary>
        /// Convert Video to Animated GIF format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <param name="startTime">Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)</param>
        /// <param name="timeSpan">Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> VideoConvertToGifWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, bool? extendProcessingTime = null, DateTime? startTime = null, DateTime? timeSpan = null);
        /// <summary>
        /// Convert Video to MOV format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] VideoConvertToMov (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);

        /// <summary>
        /// Convert Video to MOV format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> VideoConvertToMovWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);
        /// <summary>
        /// Convert Video to MP4 format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] VideoConvertToMp4 (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);

        /// <summary>
        /// Convert Video to MP4 format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> VideoConvertToMp4WithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);
        /// <summary>
        /// Convert Video to WEBM format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] VideoConvertToWebm (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);

        /// <summary>
        /// Convert Video to WEBM format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> VideoConvertToWebmWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);
        /// <summary>
        /// Get detailed information about a video or audio file
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] VideoGetInfo (System.IO.Stream inputFile, string fileUrl = null);

        /// <summary>
        /// Get detailed information about a video or audio file
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> VideoGetInfoWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Convert Video to Animated GIF format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <param name="startTime">Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)</param>
        /// <param name="timeSpan">Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> VideoConvertToGifAsync (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, bool? extendProcessingTime = null, DateTime? startTime = null, DateTime? timeSpan = null);

        /// <summary>
        /// Convert Video to Animated GIF format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <param name="startTime">Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)</param>
        /// <param name="timeSpan">Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoConvertToGifAsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, bool? extendProcessingTime = null, DateTime? startTime = null, DateTime? timeSpan = null);
        /// <summary>
        /// Convert Video to MOV format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> VideoConvertToMovAsync (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);

        /// <summary>
        /// Convert Video to MOV format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoConvertToMovAsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);
        /// <summary>
        /// Convert Video to MP4 format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> VideoConvertToMp4Async (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);

        /// <summary>
        /// Convert Video to MP4 format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoConvertToMp4AsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);
        /// <summary>
        /// Convert Video to WEBM format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> VideoConvertToWebmAsync (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);

        /// <summary>
        /// Convert Video to WEBM format.
        /// </summary>
        /// <remarks>
        /// Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoConvertToWebmAsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null);
        /// <summary>
        /// Get detailed information about a video or audio file
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> VideoGetInfoAsync (System.IO.Stream inputFile, string fileUrl = null);

        /// <summary>
        /// Get detailed information about a video or audio file
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoGetInfoAsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideoApi : IVideoApi
    {
        private Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideoApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideoApi(Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert Video to Animated GIF format. Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <param name="startTime">Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)</param>
        /// <param name="timeSpan">Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] VideoConvertToGif (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, bool? extendProcessingTime = null, DateTime? startTime = null, DateTime? timeSpan = null)
        {
             ApiResponse<byte[]> localVarResponse = VideoConvertToGifWithHttpInfo(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, extendProcessingTime, startTime, timeSpan);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Video to Animated GIF format. Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <param name="startTime">Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)</param>
        /// <param name="timeSpan">Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > VideoConvertToGifWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, bool? extendProcessingTime = null, DateTime? startTime = null, DateTime? timeSpan = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoConvertToGif");

            var localVarPath = "/video/convert/to/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (maxWidth != null) localVarHeaderParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // header parameter
            if (maxHeight != null) localVarHeaderParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // header parameter
            if (preserveAspectRatio != null) localVarHeaderParams.Add("preserveAspectRatio", this.Configuration.ApiClient.ParameterToString(preserveAspectRatio)); // header parameter
            if (frameRate != null) localVarHeaderParams.Add("frameRate", this.Configuration.ApiClient.ParameterToString(frameRate)); // header parameter
            if (extendProcessingTime != null) localVarHeaderParams.Add("extendProcessingTime", this.Configuration.ApiClient.ParameterToString(extendProcessingTime)); // header parameter
            if (startTime != null) localVarHeaderParams.Add("startTime", this.Configuration.ApiClient.ParameterToString(startTime)); // header parameter
            if (timeSpan != null) localVarHeaderParams.Add("timeSpan", this.Configuration.ApiClient.ParameterToString(timeSpan)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Video to Animated GIF format. Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <param name="startTime">Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)</param>
        /// <param name="timeSpan">Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> VideoConvertToGifAsync (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, bool? extendProcessingTime = null, DateTime? startTime = null, DateTime? timeSpan = null)
        {
             ApiResponse<byte[]> localVarResponse = await VideoConvertToGifAsyncWithHttpInfo(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, extendProcessingTime, startTime, timeSpan);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Video to Animated GIF format. Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to 24 frames per second. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <param name="startTime">Optional; Specify the desired starting time of the GIF video in TimeSpan format. (optional)</param>
        /// <param name="timeSpan">Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoConvertToGifAsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, bool? extendProcessingTime = null, DateTime? startTime = null, DateTime? timeSpan = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoConvertToGif");

            var localVarPath = "/video/convert/to/gif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (maxWidth != null) localVarHeaderParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // header parameter
            if (maxHeight != null) localVarHeaderParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // header parameter
            if (preserveAspectRatio != null) localVarHeaderParams.Add("preserveAspectRatio", this.Configuration.ApiClient.ParameterToString(preserveAspectRatio)); // header parameter
            if (frameRate != null) localVarHeaderParams.Add("frameRate", this.Configuration.ApiClient.ParameterToString(frameRate)); // header parameter
            if (extendProcessingTime != null) localVarHeaderParams.Add("extendProcessingTime", this.Configuration.ApiClient.ParameterToString(extendProcessingTime)); // header parameter
            if (startTime != null) localVarHeaderParams.Add("startTime", this.Configuration.ApiClient.ParameterToString(startTime)); // header parameter
            if (timeSpan != null) localVarHeaderParams.Add("timeSpan", this.Configuration.ApiClient.ParameterToString(timeSpan)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoConvertToGif", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Video to MOV format. Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] VideoConvertToMov (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
             ApiResponse<byte[]> localVarResponse = VideoConvertToMovWithHttpInfo(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, quality, extendProcessingTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Video to MOV format. Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > VideoConvertToMovWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoConvertToMov");

            var localVarPath = "/video/convert/to/mov";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (maxWidth != null) localVarHeaderParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // header parameter
            if (maxHeight != null) localVarHeaderParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // header parameter
            if (preserveAspectRatio != null) localVarHeaderParams.Add("preserveAspectRatio", this.Configuration.ApiClient.ParameterToString(preserveAspectRatio)); // header parameter
            if (frameRate != null) localVarHeaderParams.Add("frameRate", this.Configuration.ApiClient.ParameterToString(frameRate)); // header parameter
            if (quality != null) localVarHeaderParams.Add("quality", this.Configuration.ApiClient.ParameterToString(quality)); // header parameter
            if (extendProcessingTime != null) localVarHeaderParams.Add("extendProcessingTime", this.Configuration.ApiClient.ParameterToString(extendProcessingTime)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoConvertToMov", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Video to MOV format. Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> VideoConvertToMovAsync (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
             ApiResponse<byte[]> localVarResponse = await VideoConvertToMovAsyncWithHttpInfo(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, quality, extendProcessingTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Video to MOV format. Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoConvertToMovAsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoConvertToMov");

            var localVarPath = "/video/convert/to/mov";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (maxWidth != null) localVarHeaderParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // header parameter
            if (maxHeight != null) localVarHeaderParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // header parameter
            if (preserveAspectRatio != null) localVarHeaderParams.Add("preserveAspectRatio", this.Configuration.ApiClient.ParameterToString(preserveAspectRatio)); // header parameter
            if (frameRate != null) localVarHeaderParams.Add("frameRate", this.Configuration.ApiClient.ParameterToString(frameRate)); // header parameter
            if (quality != null) localVarHeaderParams.Add("quality", this.Configuration.ApiClient.ParameterToString(quality)); // header parameter
            if (extendProcessingTime != null) localVarHeaderParams.Add("extendProcessingTime", this.Configuration.ApiClient.ParameterToString(extendProcessingTime)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoConvertToMov", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Video to MP4 format. Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] VideoConvertToMp4 (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
             ApiResponse<byte[]> localVarResponse = VideoConvertToMp4WithHttpInfo(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, quality, extendProcessingTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Video to MP4 format. Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > VideoConvertToMp4WithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoConvertToMp4");

            var localVarPath = "/video/convert/to/mp4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (maxWidth != null) localVarHeaderParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // header parameter
            if (maxHeight != null) localVarHeaderParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // header parameter
            if (preserveAspectRatio != null) localVarHeaderParams.Add("preserveAspectRatio", this.Configuration.ApiClient.ParameterToString(preserveAspectRatio)); // header parameter
            if (frameRate != null) localVarHeaderParams.Add("frameRate", this.Configuration.ApiClient.ParameterToString(frameRate)); // header parameter
            if (quality != null) localVarHeaderParams.Add("quality", this.Configuration.ApiClient.ParameterToString(quality)); // header parameter
            if (extendProcessingTime != null) localVarHeaderParams.Add("extendProcessingTime", this.Configuration.ApiClient.ParameterToString(extendProcessingTime)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoConvertToMp4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Video to MP4 format. Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> VideoConvertToMp4Async (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
             ApiResponse<byte[]> localVarResponse = await VideoConvertToMp4AsyncWithHttpInfo(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, quality, extendProcessingTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Video to MP4 format. Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoConvertToMp4AsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoConvertToMp4");

            var localVarPath = "/video/convert/to/mp4";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (maxWidth != null) localVarHeaderParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // header parameter
            if (maxHeight != null) localVarHeaderParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // header parameter
            if (preserveAspectRatio != null) localVarHeaderParams.Add("preserveAspectRatio", this.Configuration.ApiClient.ParameterToString(preserveAspectRatio)); // header parameter
            if (frameRate != null) localVarHeaderParams.Add("frameRate", this.Configuration.ApiClient.ParameterToString(frameRate)); // header parameter
            if (quality != null) localVarHeaderParams.Add("quality", this.Configuration.ApiClient.ParameterToString(quality)); // header parameter
            if (extendProcessingTime != null) localVarHeaderParams.Add("extendProcessingTime", this.Configuration.ApiClient.ParameterToString(extendProcessingTime)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoConvertToMp4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Video to WEBM format. Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] VideoConvertToWebm (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
             ApiResponse<byte[]> localVarResponse = VideoConvertToWebmWithHttpInfo(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, quality, extendProcessingTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Video to WEBM format. Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > VideoConvertToWebmWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoConvertToWebm");

            var localVarPath = "/video/convert/to/webm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (maxWidth != null) localVarHeaderParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // header parameter
            if (maxHeight != null) localVarHeaderParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // header parameter
            if (preserveAspectRatio != null) localVarHeaderParams.Add("preserveAspectRatio", this.Configuration.ApiClient.ParameterToString(preserveAspectRatio)); // header parameter
            if (frameRate != null) localVarHeaderParams.Add("frameRate", this.Configuration.ApiClient.ParameterToString(frameRate)); // header parameter
            if (quality != null) localVarHeaderParams.Add("quality", this.Configuration.ApiClient.ParameterToString(quality)); // header parameter
            if (extendProcessingTime != null) localVarHeaderParams.Add("extendProcessingTime", this.Configuration.ApiClient.ParameterToString(extendProcessingTime)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoConvertToWebm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Video to WEBM format. Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> VideoConvertToWebmAsync (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
             ApiResponse<byte[]> localVarResponse = await VideoConvertToWebmAsyncWithHttpInfo(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, quality, extendProcessingTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Video to WEBM format. Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="maxWidth">Optional; Maximum width of the output video, up to the original video width. Defaults to original video width. (optional)</param>
        /// <param name="maxHeight">Optional; Maximum height of the output video, up to the original video width. Defaults to original video height. (optional)</param>
        /// <param name="preserveAspectRatio">Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true. (optional)</param>
        /// <param name="frameRate">Optional; Specify the frame rate of the output video. Defaults to original video frame rate. (optional)</param>
        /// <param name="quality">Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50. (optional)</param>
        /// <param name="extendProcessingTime">Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoConvertToWebmAsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null, int? maxWidth = null, int? maxHeight = null, bool? preserveAspectRatio = null, int? frameRate = null, int? quality = null, bool? extendProcessingTime = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoConvertToWebm");

            var localVarPath = "/video/convert/to/webm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (maxWidth != null) localVarHeaderParams.Add("maxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // header parameter
            if (maxHeight != null) localVarHeaderParams.Add("maxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // header parameter
            if (preserveAspectRatio != null) localVarHeaderParams.Add("preserveAspectRatio", this.Configuration.ApiClient.ParameterToString(preserveAspectRatio)); // header parameter
            if (frameRate != null) localVarHeaderParams.Add("frameRate", this.Configuration.ApiClient.ParameterToString(frameRate)); // header parameter
            if (quality != null) localVarHeaderParams.Add("quality", this.Configuration.ApiClient.ParameterToString(quality)); // header parameter
            if (extendProcessingTime != null) localVarHeaderParams.Add("extendProcessingTime", this.Configuration.ApiClient.ParameterToString(extendProcessingTime)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoConvertToWebm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get detailed information about a video or audio file Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] VideoGetInfo (System.IO.Stream inputFile, string fileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = VideoGetInfoWithHttpInfo(inputFile, fileUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed information about a video or audio file Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > VideoGetInfoWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoGetInfo");

            var localVarPath = "/video/convert/get-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoGetInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get detailed information about a video or audio file Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> VideoGetInfoAsync (System.IO.Stream inputFile, string fileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = await VideoGetInfoAsyncWithHttpInfo(inputFile, fileUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed information about a video or audio file Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileUrl">Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> VideoGetInfoAsyncWithHttpInfo (System.IO.Stream inputFile, string fileUrl = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling VideoApi->VideoGetInfo");

            var localVarPath = "/video/convert/get-info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VideoGetInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
