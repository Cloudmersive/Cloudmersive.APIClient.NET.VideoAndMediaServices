/* 
 * videoapi
 *
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.VideoAndMediaServices.Client;

namespace Cloudmersive.APIClient.NET.VideoAndMediaServices.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAudioApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert Audio File to AAC format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] AudioConvertToAac (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);

        /// <summary>
        /// Convert Audio File to AAC format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> AudioConvertToAacWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);
        /// <summary>
        /// Convert Audio File to M4A format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] AudioConvertToM4a (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);

        /// <summary>
        /// Convert Audio File to M4A format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> AudioConvertToM4aWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);
        /// <summary>
        /// Convert Audio File to MP3 format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] AudioConvertToMp3 (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);

        /// <summary>
        /// Convert Audio File to MP3 format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> AudioConvertToMp3WithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);
        /// <summary>
        /// Convert Audio File to WAV format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="sampleRate">Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] AudioConvertToWav (System.IO.Stream inputFile = null, string fileUrl = null, decimal? sampleRate = null);

        /// <summary>
        /// Convert Audio File to WAV format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="sampleRate">Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> AudioConvertToWavWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, decimal? sampleRate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Convert Audio File to AAC format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> AudioConvertToAacAsync (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);

        /// <summary>
        /// Convert Audio File to AAC format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> AudioConvertToAacAsyncWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);
        /// <summary>
        /// Convert Audio File to M4A format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> AudioConvertToM4aAsync (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);

        /// <summary>
        /// Convert Audio File to M4A format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> AudioConvertToM4aAsyncWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);
        /// <summary>
        /// Convert Audio File to MP3 format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> AudioConvertToMp3Async (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);

        /// <summary>
        /// Convert Audio File to MP3 format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> AudioConvertToMp3AsyncWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null);
        /// <summary>
        /// Convert Audio File to WAV format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="sampleRate">Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> AudioConvertToWavAsync (System.IO.Stream inputFile = null, string fileUrl = null, decimal? sampleRate = null);

        /// <summary>
        /// Convert Audio File to WAV format.
        /// </summary>
        /// <remarks>
        /// Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="sampleRate">Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> AudioConvertToWavAsyncWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, decimal? sampleRate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AudioApi : IAudioApi
    {
        private Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AudioApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AudioApi(Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert Audio File to AAC format. Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] AudioConvertToAac (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {
             ApiResponse<byte[]> localVarResponse = AudioConvertToAacWithHttpInfo(inputFile, fileUrl, bitRate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Audio File to AAC format. Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > AudioConvertToAacWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {

            var localVarPath = "/video/convert/to/aac";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (bitRate != null) localVarHeaderParams.Add("bitRate", this.Configuration.ApiClient.ParameterToString(bitRate)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudioConvertToAac", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Audio File to AAC format. Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> AudioConvertToAacAsync (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {
             ApiResponse<byte[]> localVarResponse = await AudioConvertToAacAsyncWithHttpInfo(inputFile, fileUrl, bitRate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Audio File to AAC format. Automatically detect audio file format and convert it to AAC format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> AudioConvertToAacAsyncWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {

            var localVarPath = "/video/convert/to/aac";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (bitRate != null) localVarHeaderParams.Add("bitRate", this.Configuration.ApiClient.ParameterToString(bitRate)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudioConvertToAac", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Audio File to M4A format. Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] AudioConvertToM4a (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {
             ApiResponse<byte[]> localVarResponse = AudioConvertToM4aWithHttpInfo(inputFile, fileUrl, bitRate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Audio File to M4A format. Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > AudioConvertToM4aWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {

            var localVarPath = "/video/convert/to/m4a";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (bitRate != null) localVarHeaderParams.Add("bitRate", this.Configuration.ApiClient.ParameterToString(bitRate)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudioConvertToM4a", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Audio File to M4A format. Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> AudioConvertToM4aAsync (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {
             ApiResponse<byte[]> localVarResponse = await AudioConvertToM4aAsyncWithHttpInfo(inputFile, fileUrl, bitRate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Audio File to M4A format. Automatically detect audio file format and convert it to M4A format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> AudioConvertToM4aAsyncWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {

            var localVarPath = "/video/convert/to/m4a";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (bitRate != null) localVarHeaderParams.Add("bitRate", this.Configuration.ApiClient.ParameterToString(bitRate)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudioConvertToM4a", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Audio File to MP3 format. Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] AudioConvertToMp3 (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {
             ApiResponse<byte[]> localVarResponse = AudioConvertToMp3WithHttpInfo(inputFile, fileUrl, bitRate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Audio File to MP3 format. Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > AudioConvertToMp3WithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {

            var localVarPath = "/video/convert/to/mp3";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (bitRate != null) localVarHeaderParams.Add("bitRate", this.Configuration.ApiClient.ParameterToString(bitRate)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudioConvertToMp3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Audio File to MP3 format. Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> AudioConvertToMp3Async (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {
             ApiResponse<byte[]> localVarResponse = await AudioConvertToMp3AsyncWithHttpInfo(inputFile, fileUrl, bitRate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Audio File to MP3 format. Automatically detect audio file format and convert it to MP3 format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="bitRate">Optional; Specify the desired bitrate of the converted audio file in kilobytes per second (kB/s). Value may be between 48 and 1,411. By default, the optimal bitrate will be chosen automatically. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> AudioConvertToMp3AsyncWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, int? bitRate = null)
        {

            var localVarPath = "/video/convert/to/mp3";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (bitRate != null) localVarHeaderParams.Add("bitRate", this.Configuration.ApiClient.ParameterToString(bitRate)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudioConvertToMp3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Audio File to WAV format. Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="sampleRate">Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] AudioConvertToWav (System.IO.Stream inputFile = null, string fileUrl = null, decimal? sampleRate = null)
        {
             ApiResponse<byte[]> localVarResponse = AudioConvertToWavWithHttpInfo(inputFile, fileUrl, sampleRate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Audio File to WAV format. Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="sampleRate">Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > AudioConvertToWavWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, decimal? sampleRate = null)
        {

            var localVarPath = "/video/convert/to/wav";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (sampleRate != null) localVarHeaderParams.Add("sampleRate", this.Configuration.ApiClient.ParameterToString(sampleRate)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudioConvertToWav", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Audio File to WAV format. Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="sampleRate">Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> AudioConvertToWavAsync (System.IO.Stream inputFile = null, string fileUrl = null, decimal? sampleRate = null)
        {
             ApiResponse<byte[]> localVarResponse = await AudioConvertToWavAsyncWithHttpInfo(inputFile, fileUrl, sampleRate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Audio File to WAV format. Automatically detect audio file format and convert it to WAV format. Supports many input audio formats, including AAC, FLAC, M4A, MP2, MP3, OGG, WMA, and WAV. Uses 1 API call per 10 MB of file size. Also uses 1 API call per additional minute of processing time over 5 minutes, up to a maximum of 25 minutes total processing time. Maximum output file size is 50GB.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on. (optional)</param>
        /// <param name="fileUrl">Optional; URL of an audio file being used for conversion. Use this option for files larger than 2GB. (optional)</param>
        /// <param name="sampleRate">Optional; Specify the desired sample rate of the converted audio file in kHz. Value may be between 8 and 96. Standard for audio CDs is 44.1, while DVD audio standard is 48. By default, the optimal sample rate will be chosen automatically. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> AudioConvertToWavAsyncWithHttpInfo (System.IO.Stream inputFile = null, string fileUrl = null, decimal? sampleRate = null)
        {

            var localVarPath = "/video/convert/to/wav";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileUrl != null) localVarHeaderParams.Add("fileUrl", this.Configuration.ApiClient.ParameterToString(fileUrl)); // header parameter
            if (sampleRate != null) localVarHeaderParams.Add("sampleRate", this.Configuration.ApiClient.ParameterToString(sampleRate)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AudioConvertToWav", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
