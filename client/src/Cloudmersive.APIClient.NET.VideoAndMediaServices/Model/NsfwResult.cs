/* 
 * videoapi
 *
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.VideoAndMediaServices.Model
{
    /// <summary>
    /// The result of scanning a video file for NSFW content
    /// </summary>
    [DataContract]
    public partial class NsfwResult :  IEquatable<NsfwResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NsfwResult" /> class.
        /// </summary>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="highestClassificationResult">The highest NSFW classification of the video.</param>
        /// <param name="highestScore">The highest NSFW score out of all frames scanned.</param>
        /// <param name="totalRacyFrames">The total number of potentially \&quot;racy\&quot; frames..</param>
        /// <param name="totalNsfwFrames">The total number of frames with high probability of NSFW..</param>
        /// <param name="totalFrames">The total number of frames scanned.</param>
        /// <param name="nsfwScannedFrames">The NSFW scanning results for each frame.</param>
        public NsfwResult(bool? successful = default(bool?), string highestClassificationResult = default(string), double? highestScore = default(double?), int? totalRacyFrames = default(int?), int? totalNsfwFrames = default(int?), int? totalFrames = default(int?), List<NsfwScannedFrame> nsfwScannedFrames = default(List<NsfwScannedFrame>))
        {
            this.Successful = successful;
            this.HighestClassificationResult = highestClassificationResult;
            this.HighestScore = highestScore;
            this.TotalRacyFrames = totalRacyFrames;
            this.TotalNsfwFrames = totalNsfwFrames;
            this.TotalFrames = totalFrames;
            this.NsfwScannedFrames = nsfwScannedFrames;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// The highest NSFW classification of the video
        /// </summary>
        /// <value>The highest NSFW classification of the video</value>
        [DataMember(Name="HighestClassificationResult", EmitDefaultValue=false)]
        public string HighestClassificationResult { get; set; }

        /// <summary>
        /// The highest NSFW score out of all frames scanned
        /// </summary>
        /// <value>The highest NSFW score out of all frames scanned</value>
        [DataMember(Name="HighestScore", EmitDefaultValue=false)]
        public double? HighestScore { get; set; }

        /// <summary>
        /// The total number of potentially \&quot;racy\&quot; frames.
        /// </summary>
        /// <value>The total number of potentially \&quot;racy\&quot; frames.</value>
        [DataMember(Name="TotalRacyFrames", EmitDefaultValue=false)]
        public int? TotalRacyFrames { get; set; }

        /// <summary>
        /// The total number of frames with high probability of NSFW.
        /// </summary>
        /// <value>The total number of frames with high probability of NSFW.</value>
        [DataMember(Name="TotalNsfwFrames", EmitDefaultValue=false)]
        public int? TotalNsfwFrames { get; set; }

        /// <summary>
        /// The total number of frames scanned
        /// </summary>
        /// <value>The total number of frames scanned</value>
        [DataMember(Name="TotalFrames", EmitDefaultValue=false)]
        public int? TotalFrames { get; set; }

        /// <summary>
        /// The NSFW scanning results for each frame
        /// </summary>
        /// <value>The NSFW scanning results for each frame</value>
        [DataMember(Name="NsfwScannedFrames", EmitDefaultValue=false)]
        public List<NsfwScannedFrame> NsfwScannedFrames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NsfwResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  HighestClassificationResult: ").Append(HighestClassificationResult).Append("\n");
            sb.Append("  HighestScore: ").Append(HighestScore).Append("\n");
            sb.Append("  TotalRacyFrames: ").Append(TotalRacyFrames).Append("\n");
            sb.Append("  TotalNsfwFrames: ").Append(TotalNsfwFrames).Append("\n");
            sb.Append("  TotalFrames: ").Append(TotalFrames).Append("\n");
            sb.Append("  NsfwScannedFrames: ").Append(NsfwScannedFrames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NsfwResult);
        }

        /// <summary>
        /// Returns true if NsfwResult instances are equal
        /// </summary>
        /// <param name="input">Instance of NsfwResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NsfwResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.HighestClassificationResult == input.HighestClassificationResult ||
                    (this.HighestClassificationResult != null &&
                    this.HighestClassificationResult.Equals(input.HighestClassificationResult))
                ) && 
                (
                    this.HighestScore == input.HighestScore ||
                    (this.HighestScore != null &&
                    this.HighestScore.Equals(input.HighestScore))
                ) && 
                (
                    this.TotalRacyFrames == input.TotalRacyFrames ||
                    (this.TotalRacyFrames != null &&
                    this.TotalRacyFrames.Equals(input.TotalRacyFrames))
                ) && 
                (
                    this.TotalNsfwFrames == input.TotalNsfwFrames ||
                    (this.TotalNsfwFrames != null &&
                    this.TotalNsfwFrames.Equals(input.TotalNsfwFrames))
                ) && 
                (
                    this.TotalFrames == input.TotalFrames ||
                    (this.TotalFrames != null &&
                    this.TotalFrames.Equals(input.TotalFrames))
                ) && 
                (
                    this.NsfwScannedFrames == input.NsfwScannedFrames ||
                    this.NsfwScannedFrames != null &&
                    this.NsfwScannedFrames.SequenceEqual(input.NsfwScannedFrames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.HighestClassificationResult != null)
                    hashCode = hashCode * 59 + this.HighestClassificationResult.GetHashCode();
                if (this.HighestScore != null)
                    hashCode = hashCode * 59 + this.HighestScore.GetHashCode();
                if (this.TotalRacyFrames != null)
                    hashCode = hashCode * 59 + this.TotalRacyFrames.GetHashCode();
                if (this.TotalNsfwFrames != null)
                    hashCode = hashCode * 59 + this.TotalNsfwFrames.GetHashCode();
                if (this.TotalFrames != null)
                    hashCode = hashCode * 59 + this.TotalFrames.GetHashCode();
                if (this.NsfwScannedFrames != null)
                    hashCode = hashCode * 59 + this.NsfwScannedFrames.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
