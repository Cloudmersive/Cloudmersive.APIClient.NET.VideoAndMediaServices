/* 
 * videoapi
 *
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.VideoAndMediaServices.Model
{
    /// <summary>
    /// Result of retrieving information about a video or audio file
    /// </summary>
    [DataContract]
    public partial class MediaInformation :  IEquatable<MediaInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaInformation" /> class.
        /// </summary>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="fileFormat">The file&#39;s short format name.</param>
        /// <param name="fileFormatFull">The file&#39;s full format name.</param>
        /// <param name="validFileFormats">A list of the file&#39;s valid formats.</param>
        /// <param name="width">The video&#39;s width, if file is a video.</param>
        /// <param name="height">The video&#39;s height, if file is a video.</param>
        /// <param name="size">The file&#39;s size in bytes.</param>
        /// <param name="bitRate">The file&#39;s bit rate.</param>
        /// <param name="duration">The file&#39;s duration in seconds.</param>
        /// <param name="startTime">The file&#39;s media start time.</param>
        public MediaInformation(bool? successful = default(bool?), string fileFormat = default(string), string fileFormatFull = default(string), List<string> validFileFormats = default(List<string>), int? width = default(int?), int? height = default(int?), int? size = default(int?), int? bitRate = default(int?), double? duration = default(double?), double? startTime = default(double?))
        {
            this.Successful = successful;
            this.FileFormat = fileFormat;
            this.FileFormatFull = fileFormatFull;
            this.ValidFileFormats = validFileFormats;
            this.Width = width;
            this.Height = height;
            this.Size = size;
            this.BitRate = bitRate;
            this.Duration = duration;
            this.StartTime = startTime;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// The file&#39;s short format name
        /// </summary>
        /// <value>The file&#39;s short format name</value>
        [DataMember(Name="FileFormat", EmitDefaultValue=false)]
        public string FileFormat { get; set; }

        /// <summary>
        /// The file&#39;s full format name
        /// </summary>
        /// <value>The file&#39;s full format name</value>
        [DataMember(Name="FileFormatFull", EmitDefaultValue=false)]
        public string FileFormatFull { get; set; }

        /// <summary>
        /// A list of the file&#39;s valid formats
        /// </summary>
        /// <value>A list of the file&#39;s valid formats</value>
        [DataMember(Name="ValidFileFormats", EmitDefaultValue=false)]
        public List<string> ValidFileFormats { get; set; }

        /// <summary>
        /// The video&#39;s width, if file is a video
        /// </summary>
        /// <value>The video&#39;s width, if file is a video</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// The video&#39;s height, if file is a video
        /// </summary>
        /// <value>The video&#39;s height, if file is a video</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// The file&#39;s size in bytes
        /// </summary>
        /// <value>The file&#39;s size in bytes</value>
        [DataMember(Name="Size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// The file&#39;s bit rate
        /// </summary>
        /// <value>The file&#39;s bit rate</value>
        [DataMember(Name="BitRate", EmitDefaultValue=false)]
        public int? BitRate { get; set; }

        /// <summary>
        /// The file&#39;s duration in seconds
        /// </summary>
        /// <value>The file&#39;s duration in seconds</value>
        [DataMember(Name="Duration", EmitDefaultValue=false)]
        public double? Duration { get; set; }

        /// <summary>
        /// The file&#39;s media start time
        /// </summary>
        /// <value>The file&#39;s media start time</value>
        [DataMember(Name="StartTime", EmitDefaultValue=false)]
        public double? StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaInformation {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  FileFormatFull: ").Append(FileFormatFull).Append("\n");
            sb.Append("  ValidFileFormats: ").Append(ValidFileFormats).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  BitRate: ").Append(BitRate).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaInformation);
        }

        /// <summary>
        /// Returns true if MediaInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.FileFormat == input.FileFormat ||
                    (this.FileFormat != null &&
                    this.FileFormat.Equals(input.FileFormat))
                ) && 
                (
                    this.FileFormatFull == input.FileFormatFull ||
                    (this.FileFormatFull != null &&
                    this.FileFormatFull.Equals(input.FileFormatFull))
                ) && 
                (
                    this.ValidFileFormats == input.ValidFileFormats ||
                    this.ValidFileFormats != null &&
                    this.ValidFileFormats.SequenceEqual(input.ValidFileFormats)
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.BitRate == input.BitRate ||
                    (this.BitRate != null &&
                    this.BitRate.Equals(input.BitRate))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.FileFormat != null)
                    hashCode = hashCode * 59 + this.FileFormat.GetHashCode();
                if (this.FileFormatFull != null)
                    hashCode = hashCode * 59 + this.FileFormatFull.GetHashCode();
                if (this.ValidFileFormats != null)
                    hashCode = hashCode * 59 + this.ValidFileFormats.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.BitRate != null)
                    hashCode = hashCode * 59 + this.BitRate.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
