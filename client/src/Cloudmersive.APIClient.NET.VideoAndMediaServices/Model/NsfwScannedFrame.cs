/* 
 * videoapi
 *
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.VideoAndMediaServices.Model
{
    /// <summary>
    /// An individual frame scanned for NSFW content
    /// </summary>
    [DataContract]
    public partial class NsfwScannedFrame :  IEquatable<NsfwScannedFrame>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NsfwScannedFrame" /> class.
        /// </summary>
        /// <param name="frameNumber">The number of the current frame.</param>
        /// <param name="timeStamp">The playback time of the current frame.</param>
        /// <param name="content">The still frame in PNG format as a byte array.</param>
        /// <param name="classificationResult">The NSFW classification of the still frame.</param>
        /// <param name="score">The NSFW score of the current frame.</param>
        public NsfwScannedFrame(int? frameNumber = default(int?), string timeStamp = default(string), byte[] content = default(byte[]), string classificationResult = default(string), double? score = default(double?))
        {
            this.FrameNumber = frameNumber;
            this.TimeStamp = timeStamp;
            this.Content = content;
            this.ClassificationResult = classificationResult;
            this.Score = score;
        }
        
        /// <summary>
        /// The number of the current frame
        /// </summary>
        /// <value>The number of the current frame</value>
        [DataMember(Name="FrameNumber", EmitDefaultValue=false)]
        public int? FrameNumber { get; set; }

        /// <summary>
        /// The playback time of the current frame
        /// </summary>
        /// <value>The playback time of the current frame</value>
        [DataMember(Name="TimeStamp", EmitDefaultValue=false)]
        public string TimeStamp { get; set; }

        /// <summary>
        /// The still frame in PNG format as a byte array
        /// </summary>
        /// <value>The still frame in PNG format as a byte array</value>
        [DataMember(Name="Content", EmitDefaultValue=false)]
        public byte[] Content { get; set; }

        /// <summary>
        /// The NSFW classification of the still frame
        /// </summary>
        /// <value>The NSFW classification of the still frame</value>
        [DataMember(Name="ClassificationResult", EmitDefaultValue=false)]
        public string ClassificationResult { get; set; }

        /// <summary>
        /// The NSFW score of the current frame
        /// </summary>
        /// <value>The NSFW score of the current frame</value>
        [DataMember(Name="Score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NsfwScannedFrame {\n");
            sb.Append("  FrameNumber: ").Append(FrameNumber).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ClassificationResult: ").Append(ClassificationResult).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NsfwScannedFrame);
        }

        /// <summary>
        /// Returns true if NsfwScannedFrame instances are equal
        /// </summary>
        /// <param name="input">Instance of NsfwScannedFrame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NsfwScannedFrame input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FrameNumber == input.FrameNumber ||
                    (this.FrameNumber != null &&
                    this.FrameNumber.Equals(input.FrameNumber))
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ClassificationResult == input.ClassificationResult ||
                    (this.ClassificationResult != null &&
                    this.ClassificationResult.Equals(input.ClassificationResult))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FrameNumber != null)
                    hashCode = hashCode * 59 + this.FrameNumber.GetHashCode();
                if (this.TimeStamp != null)
                    hashCode = hashCode * 59 + this.TimeStamp.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.ClassificationResult != null)
                    hashCode = hashCode * 59 + this.ClassificationResult.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
