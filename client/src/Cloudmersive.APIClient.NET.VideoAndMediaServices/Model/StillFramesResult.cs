/* 
 * videoapi
 *
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.VideoAndMediaServices.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.VideoAndMediaServices.Model
{
    /// <summary>
    /// The result of converting a video into still frames
    /// </summary>
    [DataContract]
    public partial class StillFramesResult :  IEquatable<StillFramesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StillFramesResult" /> class.
        /// </summary>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="totalFrames">The total number of frames converted.</param>
        /// <param name="stillFrames">Individual still frames from the conversion operation.</param>
        public StillFramesResult(bool? successful = default(bool?), int? totalFrames = default(int?), List<StillFrame> stillFrames = default(List<StillFrame>))
        {
            this.Successful = successful;
            this.TotalFrames = totalFrames;
            this.StillFrames = stillFrames;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// The total number of frames converted
        /// </summary>
        /// <value>The total number of frames converted</value>
        [DataMember(Name="TotalFrames", EmitDefaultValue=false)]
        public int? TotalFrames { get; set; }

        /// <summary>
        /// Individual still frames from the conversion operation
        /// </summary>
        /// <value>Individual still frames from the conversion operation</value>
        [DataMember(Name="StillFrames", EmitDefaultValue=false)]
        public List<StillFrame> StillFrames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StillFramesResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  TotalFrames: ").Append(TotalFrames).Append("\n");
            sb.Append("  StillFrames: ").Append(StillFrames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StillFramesResult);
        }

        /// <summary>
        /// Returns true if StillFramesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of StillFramesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StillFramesResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.TotalFrames == input.TotalFrames ||
                    (this.TotalFrames != null &&
                    this.TotalFrames.Equals(input.TotalFrames))
                ) && 
                (
                    this.StillFrames == input.StillFrames ||
                    this.StillFrames != null &&
                    this.StillFrames.SequenceEqual(input.StillFrames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.TotalFrames != null)
                    hashCode = hashCode * 59 + this.TotalFrames.GetHashCode();
                if (this.StillFrames != null)
                    hashCode = hashCode * 59 + this.StillFrames.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
