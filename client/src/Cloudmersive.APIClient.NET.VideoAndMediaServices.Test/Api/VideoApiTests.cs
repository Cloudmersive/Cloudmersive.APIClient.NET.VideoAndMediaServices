/* 
 * videoapi
 *
 * The video APIs help you convert, encode, and transcode videos.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Cloudmersive.APIClient.NET.VideoAndMediaServices.Client;
using Cloudmersive.APIClient.NET.VideoAndMediaServices.Api;
using Cloudmersive.APIClient.NET.VideoAndMediaServices.Model;

namespace Cloudmersive.APIClient.NET.VideoAndMediaServices.Test
{
    /// <summary>
    ///  Class for testing VideoApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class VideoApiTests
    {
        private VideoApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new VideoApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of VideoApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' VideoApi
            //Assert.IsInstanceOfType(typeof(VideoApi), instance, "instance is a VideoApi");
        }

        
        /// <summary>
        /// Test VideoConvertToGif
        /// </summary>
        [Test]
        public void VideoConvertToGifTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //bool? preserveAspectRatio = null;
            //int? frameRate = null;
            //DateTime? startTime = null;
            //DateTime? timeSpan = null;
            //var response = instance.VideoConvertToGif(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, startTime, timeSpan);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test VideoConvertToMov
        /// </summary>
        [Test]
        public void VideoConvertToMovTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //bool? preserveAspectRatio = null;
            //int? frameRate = null;
            //int? quality = null;
            //var response = instance.VideoConvertToMov(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, quality);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test VideoConvertToMp4
        /// </summary>
        [Test]
        public void VideoConvertToMp4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //bool? preserveAspectRatio = null;
            //int? frameRate = null;
            //int? quality = null;
            //var response = instance.VideoConvertToMp4(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, quality);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test VideoConvertToStillFrames
        /// </summary>
        [Test]
        public void VideoConvertToStillFramesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //decimal? framesPerSecond = null;
            //var response = instance.VideoConvertToStillFrames(inputFile, fileUrl, maxWidth, maxHeight, framesPerSecond);
            //Assert.IsInstanceOf<StillFramesResult> (response, "response is StillFramesResult");
        }
        
        /// <summary>
        /// Test VideoConvertToWebm
        /// </summary>
        [Test]
        public void VideoConvertToWebmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //bool? preserveAspectRatio = null;
            //int? frameRate = null;
            //int? quality = null;
            //var response = instance.VideoConvertToWebm(inputFile, fileUrl, maxWidth, maxHeight, preserveAspectRatio, frameRate, quality);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test VideoCutVideo
        /// </summary>
        [Test]
        public void VideoCutVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //DateTime? startTime = null;
            //DateTime? timeSpan = null;
            //var response = instance.VideoCutVideo(inputFile, fileUrl, startTime, timeSpan);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test VideoGetInfo
        /// </summary>
        [Test]
        public void VideoGetInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //var response = instance.VideoGetInfo(inputFile, fileUrl);
            //Assert.IsInstanceOf<MediaInformation> (response, "response is MediaInformation");
        }
        
        /// <summary>
        /// Test VideoResizeVideo
        /// </summary>
        [Test]
        public void VideoResizeVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //int? frameRate = null;
            //int? quality = null;
            //string extension = null;
            //var response = instance.VideoResizeVideo(inputFile, fileUrl, maxWidth, maxHeight, frameRate, quality, extension);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test VideoResizeVideoSimple
        /// </summary>
        [Test]
        public void VideoResizeVideoSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //int? maxWidth = null;
            //int? maxHeight = null;
            //int? frameRate = null;
            //int? quality = null;
            //string extension = null;
            //var response = instance.VideoResizeVideoSimple(inputFile, fileUrl, maxWidth, maxHeight, frameRate, quality, extension);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test VideoScanForNsfw
        /// </summary>
        [Test]
        public void VideoScanForNsfwTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //decimal? framesPerSecond = null;
            //var response = instance.VideoScanForNsfw(inputFile, fileUrl, framesPerSecond);
            //Assert.IsInstanceOf<NsfwResult> (response, "response is NsfwResult");
        }
        
        /// <summary>
        /// Test VideoSplitVideo
        /// </summary>
        [Test]
        public void VideoSplitVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? splitTime = null;
            //System.IO.Stream inputFile = null;
            //string fileUrl = null;
            //DateTime? timeSpan = null;
            //var response = instance.VideoSplitVideo(splitTime, inputFile, fileUrl, timeSpan);
            //Assert.IsInstanceOf<SplitVideoResult> (response, "response is SplitVideoResult");
        }
        
    }

}
